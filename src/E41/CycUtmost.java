package E41;

/**
 * 本实例将向读者介绍一个Java语言中很难发现的导致程序死循环的实例，实例将测试使用int整数类型作为循环索引变量，也是循环
 * 控制变量，用来控制循环的次数，但是当这个条件是索引小于等于变量类型的最大值时会发生什么。
 *
 * 创建CycUtmost类，在该类的主方法中创建int整数类型的变量end，使其等于整数类型的最大值，然后该值减去50开始作为循环的
 * 起始点，条件是循环控制变量小于等于end变量，在循环体中累加循环计数器，最后循环结束时显示这个计数器。
 *
 * 读者可能会认为这个程序会循环至少50次，然后把计数器的值输出，但实际上这个程序的运行结果会导致死循环，因为控制条件是
 * 索引小于等于整数类型的最大值，当整数类型达到最大值再累加1时会回到整数类型的最小值，所以它永远不可能大于end变量，
 * 这样就导致了程序的死循环，所以在程序开发时注意控制变量的取值范围。
 */
public class CycUtmost {
    public static void main(String[] args) {
        int end = Integer.MAX_VALUE; //定义循环终止数
        int start = end - 50;//定义循环起始数
        int count = 0;//定义循环计数器
        for (int i = start; i <= end ; i++) {//执行循环
            count++;    //循环计数
        }
        //输出循环计数器
        System.out.println("本次循环次数为："+count);
    }
}
//Java基本数据类型都有其取值范围，熟悉二进制原理的读者应该能够理解，当超出取值范围时，数值会被截取。例如，本实例中的循环
//控制变量超出整数类型的最大取值范围时，就会绕回整数类型的最小值。所以在进行条件判断涉及取值边界时，要考虑这个因素。
